shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
plot(x, pDistribution, type='l')
gleby <- readRDS("gleby.rds")
dys <- ecdf(gleby$pH)
plot(dys)
plot(dys, verticals = TRUE, do.points = FALSE)
# 7)
res <- shapiro.test(gleby$pH)
if (res$p.value < 0.05) {
print("H1")
} else {
print("H0")
}
# 8)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
data <- read.csv("results.txt", sep=':', header = FALSE)
setwd("D:/WordleBot/WordleBot1.0/WordleBot1.0")
data <- read.csv("results.txt", sep=':', header = FALSE)
colnames(data) <- c("case", "word", "count")
head(data)
summary(data$count)
library(ggplot2)
library(plotly)
library(dplyr)
WORD_COUNT <- length(unique(data$word))
# General analysis
E <- list()
for (j in 1:WORD_COUNT){
E[[j]] <- 0
wordToAnalyze <- unique(data$word)[j]
word_data <- data %>%
group_by(word) %>%
filter(word == wordToAnalyze)
for (i in 1:length(word_data$case)){
pX <- word_data[i,]$count / WORD_COUNT
if (pX != 0){
E[[j]] = E[[j]] - (pX * log(pX, base=2))
}
}
print(paste(round(j/WORD_COUNT, 4)*100, "%", sep=""))
}
Emin = min(unlist(E))
print(Emin)
max(unlist(E))
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=case, y=count))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot)
ggplotly(wordEntropyPlot)
ggplotly(wordCountsPlot)
?sort
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot) %>%
sort(count, decreasing = TRUE)
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=case, y=count))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot)
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot) %>%
sort(count, decreasing = TRUE)
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
sort(gr_data$count, decreasing = TRUE)
gr_data <- gr_data[order(count, decreasing = TRUE)]
gr_data <- gr_data[order(count, decreasing = TRUE),]
?order
gr_data <- gr_data[order(count),]
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
head(gr_data)
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=case, y=count))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot)
ggplotly(wordEntropyPlot)
ggplotly(wordCountsPlot)
gr_data[1,]$count
gr_data[2,]$count
gr_data[3,]$count
wordCountsPlot <- ggplot(data=gr_data, aes(y=count))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot)
gr_data["no"] <- seq(1:length(gr_data$case))
head(gr_data)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot)
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
ggplotly(wordCountsPlot, tooltip = c("case"))
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
print(Emin[[which.min(Emin)]])
which.min(Emin)
print(Emin[which.min(Emin)])
print(E[which.min(E)])
which.min(E)
E[4148]
E[4148]head(E)
head(E)
data[[4148]]
head(data)
data[[4148]]
print(E[which.min(E)])
tail(data)
data[4318]
data[[4318]]
data$word[4318]
print(data$word[which.min(E)])
print(data$word[which.max(E)])
which.max(E)
max(E)
max(unlist(E))
wordToPlot <- "abask"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
unlist(E)
wordToPlot <- "aahed"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
print(unique(data$word)[which.min(E)])
print(unique(data$word)[which.max(E)])
max(unlist(E))
wordToPlot <- "esses"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text="case: " + case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "case"))
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("text", "case"))
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
wordEmax = unique(data$word)[which.max(E)]
print(wordEmax)
wordEmin = unique(data$word)[which.min(E)]
print(wordEmin)
wordToPlot <- wordEmin #"esses"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
ggplotly(wordEntropyPlot)
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
head(data)
summary(data$count)
summary(data$case)
WORD_COUNT <- length(unique(data$word))
WORD_COUNT
word_data
word_data[i,3]
word_data[1,3]
Emin = min(unlist(E))
print(Emin)
wordEmin = unique(data$word)[which.min(E)]
print(wordEmin)
wordToPlot <- "crane"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
head(gr_data)
gr_data["no"] <- seq(1:length(gr_data$case))
head(gr_data)
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
# One word
wordToPlot <- wordEmin #"esses"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
wordToPlot
wordToPlot <- wordEmax #"esses"
gr_data <- data %>%
group_by(word) %>%
filter(word == wordToPlot)
gr_data <- gr_data[order(gr_data$count, decreasing = TRUE),]
gr_data["no"] <- seq(1:length(gr_data$case))
EBits = 0
for (i in 1:length(gr_data$case)){
pX <- gr_data[i,]$count / WORD_COUNT
if (pX != 0){
EBits = EBits - (pX * log(pX, base=2))
}
}
EBits <- round(EBits, digits = 2)
wordCountsPlot <- ggplot(data=gr_data, aes(x=no, y=count, text=case))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 3/4*max(gr_data$count), label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
wordEntropyPlot <- ggplot(data=gr_data, aes(x=case, y=-(count/WORD_COUNT)*log((count/WORD_COUNT), 2)))+
geom_bar(stat="identity")+
annotate("text", x = 175, y = 0.5, label = paste("E(x) =", EBits, sep = ' '), size=10)+
theme_void()
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
wordToPlot
ggplotly(wordEntropyPlot)
ggplotly(wordCountsPlot, tooltip = c("count", "text"))
#2
df<-data.frame(a=8:12, b=c(T,F,T,T,F), c=c(12.1,5,3,16.3,8.9))
df
lapply(df, mean)
#8
library(lattice)
bwplot(~Petal.Length|Species, data=iris, main="Nr albumu", key = simpleKey(levels(iris$Species), title="Odmiana", space="right"))
#9
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(colour="springgreen3") +
facet_wrap(iris$Species) +
geom_smooth(method="loess") +
ggtitle("nr albumu")
# 1)
x <- seq(-2, 2, 0.01)
pDensity <- dnorm(x)
plot(x,pDensity)
# 2)
pDistribution <- pnorm(x)
plot(x, pDistribution, type='l')
dys <- ecdf(gleby$pH)
plot(dys)
plot(dys, verticals = TRUE, do.points = FALSE)
plot(x, pDistribution, type='l')
# 7)
res <- shapiro.test(gleby$pH)
if (res$p.value < 0.05) {
print("H1")
} else {
print("H0")
}
# 7)
res <- shapiro.test(gleby$pH)
res
# 8)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
randomVector <- rnorm(1000)
shapiro.test(randomVector)
ks.test(randomVector, "pnorm")
iris %>%
group_by(Species) %>%
summarize(min = min(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
max = max(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
avg = sum(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, na.rm = TRUE)/n(),
med = median(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, na.rm = TRUE))
